 Projeto: Gerenciador de Tarefas com API REST e Interface Web
üîß Tecnologias Recomendadas
Backend: Python (FastAPI ou Flask)

Frontend: HTML + CSS + JavaScript (pode usar React ou outro framework)

Banco de Dados: SQLite ou PostgreSQL

ORM: SQLAlchemy

Autentica√ß√£o: JWT

Extras: Celery + Redis (para tarefas agendadas), SendGrid (para envio de e-mails)

üìã Funcionalidades Requeridas
Cadastro e Login de Usu√°rio

Registro com nome, e-mail e senha (criptografada com bcrypt)

Login com verifica√ß√£o e gera√ß√£o de token JWT

Rota protegida: s√≥ acessa se estiver autenticado

CRUD de Tarefas

Criar tarefa com: t√≠tulo, descri√ß√£o, data limite, prioridade e status

Listar todas as tarefas do usu√°rio logado

Atualizar informa√ß√µes de uma tarefa

Deletar tarefa

Sistema de Filtros

Buscar tarefas por status, prioridade, ou data limite

Ordena√ß√£o por data de cria√ß√£o ou urg√™ncia

Painel Web com Interface

Interface intuitiva com tabelas, formul√°rios, filtros

Login no frontend com JWT

Consumo da API REST via JavaScript/React

Notifica√ß√µes por E-mail (opcional)

Enviar e-mail de lembrete 24h antes do prazo da tarefa

Usar Celery para agendar o envio autom√°tico

